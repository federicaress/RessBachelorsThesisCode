import os
from snakemake.shell import shell
rule all:
    input:
        dnafasta = "fastafiles/Mus_musculus.GRCm38.dna.chromosome.1.fa",
        # cdsfasta = "fastafiles/Mus_musculus.GRCm38.cds.all.fa"

# rule star_genome_generate:
#     #input: "fastafiles/Mus_musculus.GRCm38.dna.chromosome.1.fa"
#     input:
#         dnafasta = "fastafiles/Mus_musculus.GRCm38.dna.chromosome.1.fa",
#         cdsfasta = "fastafiles/Mus_musculus.GRCm38.cds.all.fa"
#     output: directory("indices/")
#     shell:"STAR --runThreadN 4 --runMode genomeGenerate --genomeDir {output} --genomeFastaFiles {input.dnafasta}"

rule star_alignment:
    input:
        dnafasta = "fastafiles/Mus_musculus.GRCm38.dna.chromosome.1.fa",
        firstfile = "fastqfiles/ERR522959_1.fastq",
        secondfile = "fastqfiles/ERR522959_2.fastq"
    output: directory("results/")
    shell: "STAR --runThreadN 4 --genomeDir indices/ --readFilesIn {input.firstfile} {input.secondfile} --outFileNamePrefix {output}"

rule kallisto_index:
    input:
        firstfile = "fastqfiles/ERR522959_1.fastq",
        secondfile = "fastqfiles/ERR522959_2.fastq"
    output:"kallisto/indices.idx"
    shell: "kallisto index -i {output} {input.firstfile} {input.secondfile} "
 #
 # rule kallisto_quant:
 #     input:
 #         index = "kallisto/Mus_musculus.GRCm38.cds.all.idx",
 #         cdsfasta = "fastafiles/Mus_musculus.GRCm38.cds.all.fa"
 #     output: directory("results/")
 #     shell:"kallisto quant -i {input.index} -o {output} -b 100 --single -l 180 -s 20 {input.cdsfasta}"

rule kallistopseudo:
    input:
        index = "kallisto/indices.idx",
        firstfile = "fastqfiles/ERR522959_1.fastq",
        secondfile = "fastqfiles/ERR522959_2.fastq"
    output: directory("out/")
    shell:"kallisto pseudo -i {input} -o {output} {input.firstfile} {input.secondfile}"
rule samtools_view:
    input: "Aligned.out.sam"
    output: "Aligned.out.bam"
    shell:"samtools view -S -b {input} > {output}"

rule samtools_sort:
    input: "Aligned.out.bam"
    output: "Aligned.out.sorted.bam"
    shell:"samtools sort {input} -o {output}"

rule samtools_index:
    input: "Aligned.out.sorted.bam"
    shell:"samtools index {input}"

rule samtools_percentage:
    input: "Aligned.out.bam"
    shell:"samtools flagstat Aligned.out.bam"
